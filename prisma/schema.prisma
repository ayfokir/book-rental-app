// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




// model User {
//   user_id        Int       @id @default(autoincrement())
//   email          String    @unique
//   password       String
//   role           Role
//   phone_number   String
//   location        String
//   created_at     DateTime  @default(now())
//   updated_at     DateTime  @updatedAt
//   Books          Book[]    @relation("BookOwner")
//   Rentals        Rental[]  @relation("RenterRentals")
//   Reviews        Review[]
//   TransactionsAsRenter  Transaction[] @relation("RenterTransactions")
//   TransactionsAsOwner   Transaction[] @relation("OwnerTransactions")
//   AdminActivitiesAsAdmin AdminActivity[] @relation("AdminActions")
//   AdminActivitiesAsTargetUser AdminActivity[] @relation("TargetUserActions")
// }

// model Book {
//   book_id      Int      @id @default(autoincrement())
//   owner_id     Int
//   owner        User     @relation(fields: [owner_id], references: [user_id], name: "BookOwner")
//   title        String
//   author       String
//   category      String
//   description  String
//   rental_price Float
//   book_no  Int
//   quantity   Int
//   status       BookStatus
//   created_at   DateTime @default(now())
//   updated_at   DateTime @updatedAt
//   Rentals      Rental[]
//   AdminActivities AdminActivity[] @relation("TargetBookActions")
// }

// model Rental {
//   rental_id     Int      @id @default(autoincrement())
//   book_id       Int
//   book          Book     @relation(fields: [book_id], references: [book_id])
//   renter_id     Int
//   renter        User     @relation(fields: [renter_id], references: [user_id], name: "RenterRentals")
//   rental_start  DateTime
//   rental_end    DateTime
//   status        RentalStatus
//   created_at    DateTime @default(now())
//   updated_at    DateTime @updatedAt
//   Reviews       Review[]
//   Transactions  Transaction[]
// }

// model Review {
//   review_id     Int      @id @default(autoincrement())
//   rental_id     Int
//   rental        Rental   @relation(fields: [rental_id], references: [rental_id])
//   renter_id     Int
//   renter        User     @relation(fields: [renter_id], references: [user_id])
//   rating        Int
//   comment       String
//     status        ReviewStatus
//   created_at    DateTime @default(now())
//   updated_at    DateTime @updatedAt
// }

// model Transaction {
//   transaction_id Int       @id @default(autoincrement())
//   rental_id      Int
//   rental         Rental    @relation(fields: [rental_id], references: [rental_id])
//   renter_id      Int
//   renter         User      @relation(fields: [renter_id], references: [user_id], name: "RenterTransactions")
//   owner_id       Int
//   owner          User      @relation(fields: [owner_id], references: [user_id], name: "OwnerTransactions")
//   amount         Float
//   status         TransactionStatus
//   created_at     DateTime  @default(now())
//   updated_at     DateTime  @updatedAt
// }

// model AdminActivity {
//   activity_id     Int      @id @default(autoincrement())
//   admin_id        Int
//   admin           User     @relation(fields: [admin_id], references: [user_id], name: "AdminActions")
//   action          String
//   target_user_id  Int?     
//   target_user     User?    @relation(fields: [target_user_id], references: [user_id], name: "TargetUserActions")
//   target_book_id  Int?     
//   target_book     Book?    @relation(fields: [target_book_id], references: [book_id], name: "TargetBookActions")
//   details         String
//   created_at      DateTime @default(now())
// }

// enum Role {
//   renter
//   owner
//   admin
// }

// enum BookStatus {
//   free
//   rented
//   unavailable
// }

// enum RentalStatus {
//   ongoing
//   completed
//   cancelled
// }

// enum TransactionStatus {
//   pending
//   completed
//   failed
// }

// enum ReviewStatus {
//   pending
//   approved
//   rejected
// }


model User {
  user_id        Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  role           Role
  phone_number   String
  location       String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  Books          BookUploaded[]    @relation("BookOwner")
  Rentals        Rental[]  @relation("RenterRentals")
  TransactionsAsRenter  Transaction[] @relation("RenterTransactions")
  TransactionsAsOwner   Transaction[] @relation("OwnerTransactions")
  AdminActivitiesAsAdmin AdminActivity[] @relation("AdminActions")
  AdminActivitiesAsTargetUser AdminActivity[] @relation("TargetUserActions")
}

model Book {
  book_id        Int       @id @default(autoincrement())
  book_name       String
  author_name     String 
  author         String
  category       Category 
}


model BookUploaded {
  book_id        Int       @id @default(autoincrement())
  owner_id       Int
  owner          User      @relation(fields: [owner_id], references: [user_id], name: "BookOwner")
  book_name       String
  author_name     String 
  author         String
  category       String 
  price   Float
  book_no        Int
  quantity       Int
  status         BookStatus
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  Rentals        Rental[]
  AdminActivities AdminActivity[] @relation("TargetBookActions")
}

model Rental {
  rental_id     Int      @id @default(autoincrement())
  book_id       Int
  book          BookUploaded     @relation(fields: [book_id], references: [book_id])
  renter_id     Int
  renter        User     @relation(fields: [renter_id], references: [user_id], name: "RenterRentals")
  rental_start  DateTime
  rental_end    DateTime
  status        RentalStatus
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  Transactions  Transaction[]
}



model Transaction {
  transaction_id Int       @id @default(autoincrement())
  rental_id      Int
  rental         Rental    @relation(fields: [rental_id], references: [rental_id])
  renter_id      Int
  renter         User      @relation(fields: [renter_id], references: [user_id], name: "RenterTransactions")
  owner_id       Int
  owner          User      @relation(fields: [owner_id], references: [user_id], name: "OwnerTransactions")
  amount         Float
  status         TransactionStatus
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
}

model AdminActivity {
  activity_id     Int      @id @default(autoincrement())
  admin_id        Int
  admin           User     @relation(fields: [admin_id], references: [user_id], name: "AdminActions")
  action          String
  target_user_id  Int?     
  target_user     User?    @relation(fields: [target_user_id], references: [user_id], name: "TargetUserActions")
  target_book_id  Int?     
  target_book     BookUploaded?    @relation(fields: [target_book_id], references: [book_id], name: "TargetBookActions")
  details         String
  created_at      DateTime @default(now())
}



enum Category {
    Fiction
    SelfHelp
    Business
}

enum Role {
  renter
  owner
  admin
}

enum BookStatus {
  free
  rented
  unavailable
}

enum RentalStatus {
  ongoing
  completed
  cancelled
}

enum TransactionStatus {
  pending
  completed
  failed
}


